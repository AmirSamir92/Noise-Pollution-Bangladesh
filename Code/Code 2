#include <avr/sleep.h>
#include <avr/power.h>
#include <avr/wdt.h>
//Value for watchdog timer interrupt.
volatile int f_wdt = 1;
int seconds = 0;
int minutes = 1;
int hours = 0;
int interval = ((hours*60*60) + (minutes*60) + (seconds))/8;
int timerCounter = 0;
//API Key from ThingSpeak
String API_KEY = "";
//DTR pin of SIM800 should be high to enable sleep mode
int dtr_pin = 6;
// Sample window width in mS (50 mS = 20Hz)
const int sampleWindow = 50;
unsigned int sample;
//ISR for watchdog timer.
ISR(WDT_vect)
{
 if(f_wdt == 0)
 {
 f_wdt=1;
 timerCounter++;
 }
 else
 {
 //Serial.println("WDT Overrun!!!");
 }
}
void setup() {
 Serial.begin(9600); /* Define baud rate for serial communication */
 pinMode(dtr_pin, OUTPUT);
 digitalWrite(dtr_pin, HIGH);
 setupWdt();
 randomSeed(analogRead(0)
 wdt_reset(); //fresh start of watchdog
 //Reset timer.
 timerCounter = 0;
 }
 /* Don't forget to clear the flag. */
 f_wdt = 0;
 /* Re-enter sleep mode. */
 enterSleep();
 }
 else
 {
 /* Do nothing. */
 }
}
void send_data(){
 Serial.println("AT"); /* Check Communication */
 delay(200);
 /* Configure bearer profile 1 */
 Serial.println("AT+SAPBR=3,1,\"CONTYPE\",\"Serial\""); /* Connection type
GPRS */
 delay(2000);
 Serial.println("AT+SAPBR=3,1,\"APN\",\"gpinternet\""); /* APN of the
provider */
 delay(3000);
 wdt_reset(); //reset wdt to prevent interrupt
 Serial.println("AT+SAPBR=1,1"); /* Open GPRS context */
 delay(3000);
 Serial.println("AT+SAPBR=2,1"); /* Query the GPRS context */
 delay(3000);
 wdt_reset(); //must reset within 8sec
 Serial.println("AT+HTTPINIT"); /* Initialize HTTP service */
 delay(2000);
 Serial.println("AT+HTTPPARA=\"CID\",1"); /* Set parameters for HTTP
session */
 delay(3000);
 wdt_reset();
 Serial.println("AT+HTTPPARA=\"URL\",\"api.thingspeak.com/update\""); /*
Set parameters for HTTP session */
 delay(3000);
 Serial.println("AT+HTTPDATA=33,10000"); /* POST data of size 33 Bytes with
maximum latency time of 10seconds for inputting the data*/
 delay(3000);
 wdt_reset();
 Serial.println(API_KEY);
 delay(3000);
 Serial.println("AT+HTTPACTION=1"); /* Start POST session */
 delay(3000);
 wdt_reset();
 Serial.println("AT+HTTPTERM"); /* Terminate HTTP service */
 delay(3000);
 Serial.println("AT+SAPBR=0,1"); /* Close Serial context */
 delay(3000);
 wdt_reset(); //total 37sec
}
void sleep_sim800(){
 Serial.println("AT"); /* Check Communication */
 delay(10);
 Serial.println("AT+CSCLK=2"); /* Set Sleep mode 2 */
 delay(500);
}
void wake_up_sim800(){
 Serial.println("AT"); /* Check Communication */
 delay(10);
 Serial.println("AT+CSCLK=0"); /* Desable sleep mode */
 delay(500);
}
//this function calculate sound level in dB
float calculate_sound_in_db(){
 unsigned long startMillis= millis(); // Start of sample
window
 float peakToPeak = 0; // peak-to-peak
level
 unsigned int signalMax = 0; //minimum value
 unsigned int signalMin = 1024; //maximum value
 // collect data for
50 mS
 while (millis() - startMillis < sampleWindow)
 {
 sample = analogRead(A1); //get reading from
microphone
 if (sample < 1024) // toss out
spurious readings
 {
 if (sample > signalMax)
 {
 signalMax = sample; // save just the
max levels
 }
 else if (sample < signalMin)
 {
 signalMin = sample; // save just the
min levels
 }
 }
 }
 peakToPeak = signalMax - signalMin; // max - min =
peak-peak amplitude
 //Serial.println(peakToPeak); //write
calibrated deciBels
 float db = map(peakToPeak,0,1000,48,120); //calibrate for
deciBels
 Serial.print(db); //write calibrated
deciBels
 Serial.println(" dB"); //write units
 return db;
}
void enterSleep(void)
{
 set_sleep_mode(SLEEP_MODE_PWR_DOWN);
 sleep_enable();
 /* Now enter sleep mode. */
 sleep_mode();
 /* The program will continue from here after the WDT timeout*/
 sleep_disable(); /* First thing to do is disable sleep. */
 /* Re-enable the peripherals. */
 power_all_enable();
}
void setupWdt()
{
 /*** Setup the WDT ***/
 /* Clear the reset flag. */
 MCUSR &= ~(1<<WDRF);
 /* In order to change WDE or the prescaler, we need to
 * set WDCE (This will allow updates for 4 clock cycles).
 */
 WDTCSR |= (1<<WDCE) | (1<<WDE);
 /* set new watchdog timeout prescaler value */
 WDTCSR = 1<<WDP0 | 1<<WDP3; /* 8.0 seconds */
 /* Enable the WD interrupt (note no reset). */
 WDTCSR |= _BV(WDIE);
